=begin
#Retrotax TCID

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2017-03-07T10:58:26Z

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [ApplicationStatusesList]
    def application_statuses_get(opts = {})
      data, _status_code, _headers = application_statuses_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(ApplicationStatusesList, Fixnum, Hash)>] ApplicationStatusesList data, response status code and response headers
    def application_statuses_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.application_statuses_get ..."
      end
      # resource path
      local_var_path = "/application_statuses".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationStatusesList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#application_statuses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param status_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [ApplicationStatus]
    def application_statuses_status_code_get(status_code, opts = {})
      data, _status_code, _headers = application_statuses_status_code_get_with_http_info(status_code, opts)
      return data
    end

    # 
    # 
    # @param status_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(ApplicationStatus, Fixnum, Hash)>] ApplicationStatus data, response status code and response headers
    def application_statuses_status_code_get_with_http_info(status_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.application_statuses_status_code_get ..."
      end
      # verify the required parameter 'status_code' is set
      fail ArgumentError, "Missing the required parameter 'status_code' when calling DefaultApi.application_statuses_status_code_get" if status_code.nil?
      # resource path
      local_var_path = "/application_statuses/{status_code}".sub('{format}','json').sub('{' + 'status_code' + '}', status_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#application_statuses_status_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_api_key 
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def authentication_delete(opts = {})
      authentication_delete_with_http_info(opts)
      return nil
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_api_key 
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def authentication_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.authentication_delete ..."
      end
      # resource path
      local_var_path = "/authentication".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-API-KEY'] = opts[:'x_api_key'] if !opts[:'x_api_key'].nil?
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#authentication_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def authentication_oauth_login_url_get(opts = {})
      authentication_oauth_login_url_get_with_http_info(opts)
      return nil
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def authentication_oauth_login_url_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.authentication_oauth_login_url_get ..."
      end
      # resource path
      local_var_path = "/authentication/oauth_login_url".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#authentication_oauth_login_url_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param sign_in_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_api_key 
    # @option opts [String] :x_auth_iv 
    # @return [SignInResponse]
    def authentication_post(sign_in_request, opts = {})
      data, _status_code, _headers = authentication_post_with_http_info(sign_in_request, opts)
      return data
    end

    # 
    # 
    # @param sign_in_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_api_key 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(SignInResponse, Fixnum, Hash)>] SignInResponse data, response status code and response headers
    def authentication_post_with_http_info(sign_in_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.authentication_post ..."
      end
      # verify the required parameter 'sign_in_request' is set
      fail ArgumentError, "Missing the required parameter 'sign_in_request' when calling DefaultApi.authentication_post" if sign_in_request.nil?
      # resource path
      local_var_path = "/authentication".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-API-KEY'] = opts[:'x_api_key'] if !opts[:'x_api_key'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sign_in_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SignInResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#authentication_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def authentication_user_details_get(opts = {})
      data, _status_code, _headers = authentication_user_details_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def authentication_user_details_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.authentication_user_details_get ..."
      end
      # resource path
      local_var_path = "/authentication/user_details".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#authentication_user_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [BranchesResponse]
    def branches_get(opts = {})
      data, _status_code, _headers = branches_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(BranchesResponse, Fixnum, Hash)>] BranchesResponse data, response status code and response headers
    def branches_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.branches_get ..."
      end
      # resource path
      local_var_path = "/branches".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BranchesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#branches_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param client_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def clients_client_id_put(client_id, opts = {})
      clients_client_id_put_with_http_info(client_id, opts)
      return nil
    end

    # 
    # 
    # @param client_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def clients_client_id_put_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.clients_client_id_put ..."
      end
      # verify the required parameter 'client_id' is set
      fail ArgumentError, "Missing the required parameter 'client_id' when calling DefaultApi.clients_client_id_put" if client_id.nil?
      # resource path
      local_var_path = "/clients/{client_id}".sub('{format}','json').sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#clients_client_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [CompanyResponse]
    def companies_company_id_get(company_id, opts = {})
      data, _status_code, _headers = companies_company_id_get_with_http_info(company_id, opts)
      return data
    end

    # 
    # 
    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(CompanyResponse, Fixnum, Hash)>] CompanyResponse data, response status code and response headers
    def companies_company_id_get_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.companies_company_id_get ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling DefaultApi.companies_company_id_get" if company_id.nil?
      # resource path
      local_var_path = "/companies/{company_id}".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#companies_company_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [LocationsResponse]
    def companies_company_id_locations_get(company_id, opts = {})
      data, _status_code, _headers = companies_company_id_locations_get_with_http_info(company_id, opts)
      return data
    end

    # 
    # 
    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(LocationsResponse, Fixnum, Hash)>] LocationsResponse data, response status code and response headers
    def companies_company_id_locations_get_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.companies_company_id_locations_get ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling DefaultApi.companies_company_id_locations_get" if company_id.nil?
      # resource path
      local_var_path = "/companies/{company_id}/locations".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LocationsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#companies_company_id_locations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param location_id 
    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_key 
    # @return [Location]
    def companies_company_id_locations_location_id_get(location_id, company_id, opts = {})
      data, _status_code, _headers = companies_company_id_locations_location_id_get_with_http_info(location_id, company_id, opts)
      return data
    end

    # 
    # 
    # @param location_id 
    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_key 
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def companies_company_id_locations_location_id_get_with_http_info(location_id, company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.companies_company_id_locations_location_id_get ..."
      end
      # verify the required parameter 'location_id' is set
      fail ArgumentError, "Missing the required parameter 'location_id' when calling DefaultApi.companies_company_id_locations_location_id_get" if location_id.nil?
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling DefaultApi.companies_company_id_locations_location_id_get" if company_id.nil?
      # resource path
      local_var_path = "/companies/{company_id}/locations/{location_id}".sub('{format}','json').sub('{' + 'location_id' + '}', location_id.to_s).sub('{' + 'company_id' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-KEY'] = opts[:'x_auth_key'] if !opts[:'x_auth_key'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#companies_company_id_locations_location_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param location_id 
    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def companies_company_id_locations_location_id_put(location_id, company_id, opts = {})
      companies_company_id_locations_location_id_put_with_http_info(location_id, company_id, opts)
      return nil
    end

    # 
    # 
    # @param location_id 
    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def companies_company_id_locations_location_id_put_with_http_info(location_id, company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.companies_company_id_locations_location_id_put ..."
      end
      # verify the required parameter 'location_id' is set
      fail ArgumentError, "Missing the required parameter 'location_id' when calling DefaultApi.companies_company_id_locations_location_id_put" if location_id.nil?
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling DefaultApi.companies_company_id_locations_location_id_put" if company_id.nil?
      # resource path
      local_var_path = "/companies/{company_id}/locations/{location_id}".sub('{format}','json').sub('{' + 'location_id' + '}', location_id.to_s).sub('{' + 'company_id' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#companies_company_id_locations_location_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_api_key 
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def companies_company_id_locations_post(company_id, opts = {})
      companies_company_id_locations_post_with_http_info(company_id, opts)
      return nil
    end

    # 
    # 
    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_api_key 
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def companies_company_id_locations_post_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.companies_company_id_locations_post ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling DefaultApi.companies_company_id_locations_post" if company_id.nil?
      # resource path
      local_var_path = "/companies/{company_id}/locations".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-API-KEY'] = opts[:'x_api_key'] if !opts[:'x_api_key'].nil?
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#companies_company_id_locations_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def companies_company_id_put(company_id, opts = {})
      companies_company_id_put_with_http_info(company_id, opts)
      return nil
    end

    # 
    # 
    # @param company_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def companies_company_id_put_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.companies_company_id_put ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling DefaultApi.companies_company_id_put" if company_id.nil?
      # resource path
      local_var_path = "/companies/{company_id}".sub('{format}','json').sub('{' + 'company_id' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#companies_company_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [CompaniesResponse]
    def companies_get(opts = {})
      data, _status_code, _headers = companies_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(CompaniesResponse, Fixnum, Hash)>] CompaniesResponse data, response status code and response headers
    def companies_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.companies_get ..."
      end
      # resource path
      local_var_path = "/companies".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompaniesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#companies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_api_key 
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def companies_post(opts = {})
      companies_post_with_http_info(opts)
      return nil
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_api_key 
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def companies_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.companies_post ..."
      end
      # resource path
      local_var_path = "/companies".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-API-KEY'] = opts[:'x_api_key'] if !opts[:'x_api_key'].nil?
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#companies_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param employee_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @option opts [String] :status 
    # @return [Documents]
    def employees_employee_id_documents_get(employee_id, opts = {})
      data, _status_code, _headers = employees_employee_id_documents_get_with_http_info(employee_id, opts)
      return data
    end

    # 
    # 
    # @param employee_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @option opts [String] :status 
    # @return [Array<(Documents, Fixnum, Hash)>] Documents data, response status code and response headers
    def employees_employee_id_documents_get_with_http_info(employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.employees_employee_id_documents_get ..."
      end
      # verify the required parameter 'employee_id' is set
      fail ArgumentError, "Missing the required parameter 'employee_id' when calling DefaultApi.employees_employee_id_documents_get" if employee_id.nil?
      # resource path
      local_var_path = "/employees/{employee_id}/documents".sub('{format}','json').sub('{' + 'employee_id' + '}', employee_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Documents')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#employees_employee_id_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param employee_id 
    # @param post_document 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [DocumentCreateResponse]
    def employees_employee_id_documents_post(employee_id, post_document, opts = {})
      data, _status_code, _headers = employees_employee_id_documents_post_with_http_info(employee_id, post_document, opts)
      return data
    end

    # 
    # 
    # @param employee_id 
    # @param post_document 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(DocumentCreateResponse, Fixnum, Hash)>] DocumentCreateResponse data, response status code and response headers
    def employees_employee_id_documents_post_with_http_info(employee_id, post_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.employees_employee_id_documents_post ..."
      end
      # verify the required parameter 'employee_id' is set
      fail ArgumentError, "Missing the required parameter 'employee_id' when calling DefaultApi.employees_employee_id_documents_post" if employee_id.nil?
      # verify the required parameter 'post_document' is set
      fail ArgumentError, "Missing the required parameter 'post_document' when calling DefaultApi.employees_employee_id_documents_post" if post_document.nil?
      # resource path
      local_var_path = "/employees/{employee_id}/documents".sub('{format}','json').sub('{' + 'employee_id' + '}', employee_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(post_document)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#employees_employee_id_documents_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param employee_id 
    # @param esign 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Employee]
    def employees_employee_id_esign_put(employee_id, esign, opts = {})
      data, _status_code, _headers = employees_employee_id_esign_put_with_http_info(employee_id, esign, opts)
      return data
    end

    # 
    # 
    # @param employee_id 
    # @param esign 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(Employee, Fixnum, Hash)>] Employee data, response status code and response headers
    def employees_employee_id_esign_put_with_http_info(employee_id, esign, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.employees_employee_id_esign_put ..."
      end
      # verify the required parameter 'employee_id' is set
      fail ArgumentError, "Missing the required parameter 'employee_id' when calling DefaultApi.employees_employee_id_esign_put" if employee_id.nil?
      # verify the required parameter 'esign' is set
      fail ArgumentError, "Missing the required parameter 'esign' when calling DefaultApi.employees_employee_id_esign_put" if esign.nil?
      # resource path
      local_var_path = "/employees/{employee_id}/esign".sub('{format}','json').sub('{' + 'employee_id' + '}', employee_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(esign)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Employee')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#employees_employee_id_esign_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param employee_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [EmployeeResponse]
    def employees_employee_id_get(employee_id, opts = {})
      data, _status_code, _headers = employees_employee_id_get_with_http_info(employee_id, opts)
      return data
    end

    # 
    # 
    # @param employee_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(EmployeeResponse, Fixnum, Hash)>] EmployeeResponse data, response status code and response headers
    def employees_employee_id_get_with_http_info(employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.employees_employee_id_get ..."
      end
      # verify the required parameter 'employee_id' is set
      fail ArgumentError, "Missing the required parameter 'employee_id' when calling DefaultApi.employees_employee_id_get" if employee_id.nil?
      # resource path
      local_var_path = "/employees/{employee_id}".sub('{format}','json').sub('{' + 'employee_id' + '}', employee_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmployeeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#employees_employee_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param employee_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [PayEntriesResponse]
    def employees_employee_id_pay_entries_get(employee_id, opts = {})
      data, _status_code, _headers = employees_employee_id_pay_entries_get_with_http_info(employee_id, opts)
      return data
    end

    # 
    # 
    # @param employee_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(PayEntriesResponse, Fixnum, Hash)>] PayEntriesResponse data, response status code and response headers
    def employees_employee_id_pay_entries_get_with_http_info(employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.employees_employee_id_pay_entries_get ..."
      end
      # verify the required parameter 'employee_id' is set
      fail ArgumentError, "Missing the required parameter 'employee_id' when calling DefaultApi.employees_employee_id_pay_entries_get" if employee_id.nil?
      # resource path
      local_var_path = "/employees/{employee_id}/pay_entries".sub('{format}','json').sub('{' + 'employee_id' + '}', employee_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PayEntriesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#employees_employee_id_pay_entries_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param pay_entry_id 
    # @param employee_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def employees_employee_id_pay_entries_pay_entry_id_delete(pay_entry_id, employee_id, opts = {})
      employees_employee_id_pay_entries_pay_entry_id_delete_with_http_info(pay_entry_id, employee_id, opts)
      return nil
    end

    # 
    # 
    # @param pay_entry_id 
    # @param employee_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def employees_employee_id_pay_entries_pay_entry_id_delete_with_http_info(pay_entry_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.employees_employee_id_pay_entries_pay_entry_id_delete ..."
      end
      # verify the required parameter 'pay_entry_id' is set
      fail ArgumentError, "Missing the required parameter 'pay_entry_id' when calling DefaultApi.employees_employee_id_pay_entries_pay_entry_id_delete" if pay_entry_id.nil?
      # verify the required parameter 'employee_id' is set
      fail ArgumentError, "Missing the required parameter 'employee_id' when calling DefaultApi.employees_employee_id_pay_entries_pay_entry_id_delete" if employee_id.nil?
      # resource path
      local_var_path = "/employees/{employee_id}/pay_entries/{pay_entry_id}".sub('{format}','json').sub('{' + 'pay_entry_id' + '}', pay_entry_id.to_s).sub('{' + 'employee_id' + '}', employee_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#employees_employee_id_pay_entries_pay_entry_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param pay_entry_id 
    # @param employee_id 
    # @param post_pay_entry_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [PostPayEntryResponse]
    def employees_employee_id_pay_entries_pay_entry_id_put(pay_entry_id, employee_id, post_pay_entry_request, opts = {})
      data, _status_code, _headers = employees_employee_id_pay_entries_pay_entry_id_put_with_http_info(pay_entry_id, employee_id, post_pay_entry_request, opts)
      return data
    end

    # 
    # 
    # @param pay_entry_id 
    # @param employee_id 
    # @param post_pay_entry_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(PostPayEntryResponse, Fixnum, Hash)>] PostPayEntryResponse data, response status code and response headers
    def employees_employee_id_pay_entries_pay_entry_id_put_with_http_info(pay_entry_id, employee_id, post_pay_entry_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.employees_employee_id_pay_entries_pay_entry_id_put ..."
      end
      # verify the required parameter 'pay_entry_id' is set
      fail ArgumentError, "Missing the required parameter 'pay_entry_id' when calling DefaultApi.employees_employee_id_pay_entries_pay_entry_id_put" if pay_entry_id.nil?
      # verify the required parameter 'employee_id' is set
      fail ArgumentError, "Missing the required parameter 'employee_id' when calling DefaultApi.employees_employee_id_pay_entries_pay_entry_id_put" if employee_id.nil?
      # verify the required parameter 'post_pay_entry_request' is set
      fail ArgumentError, "Missing the required parameter 'post_pay_entry_request' when calling DefaultApi.employees_employee_id_pay_entries_pay_entry_id_put" if post_pay_entry_request.nil?
      # resource path
      local_var_path = "/employees/{employee_id}/pay_entries/{pay_entry_id}".sub('{format}','json').sub('{' + 'pay_entry_id' + '}', pay_entry_id.to_s).sub('{' + 'employee_id' + '}', employee_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(post_pay_entry_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PostPayEntryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#employees_employee_id_pay_entries_pay_entry_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param employee_id 
    # @param post_pay_entry_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [PostPayEntryResponse]
    def employees_employee_id_pay_entries_post(employee_id, post_pay_entry_request, opts = {})
      data, _status_code, _headers = employees_employee_id_pay_entries_post_with_http_info(employee_id, post_pay_entry_request, opts)
      return data
    end

    # 
    # 
    # @param employee_id 
    # @param post_pay_entry_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(PostPayEntryResponse, Fixnum, Hash)>] PostPayEntryResponse data, response status code and response headers
    def employees_employee_id_pay_entries_post_with_http_info(employee_id, post_pay_entry_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.employees_employee_id_pay_entries_post ..."
      end
      # verify the required parameter 'employee_id' is set
      fail ArgumentError, "Missing the required parameter 'employee_id' when calling DefaultApi.employees_employee_id_pay_entries_post" if employee_id.nil?
      # verify the required parameter 'post_pay_entry_request' is set
      fail ArgumentError, "Missing the required parameter 'post_pay_entry_request' when calling DefaultApi.employees_employee_id_pay_entries_post" if post_pay_entry_request.nil?
      # resource path
      local_var_path = "/employees/{employee_id}/pay_entries".sub('{format}','json').sub('{' + 'employee_id' + '}', employee_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(post_pay_entry_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PostPayEntryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#employees_employee_id_pay_entries_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param employee_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [EmployeeResponse]
    def employees_employee_id_put(employee_id, employee_body = {}, opts = {})
      data, _status_code, _headers = employees_employee_id_put_with_http_info(employee_id, employee_body, opts)
      return data
    end

    # 
    # 
    # @param employee_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(EmployeeResponse, Fixnum, Hash)>] EmployeeResponse data, response status code and response headers
    def employees_employee_id_put_with_http_info(employee_id, employee_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.employees_employee_id_put ..."
      end
      # verify the required parameter 'employee_id' is set
      fail ArgumentError, "Missing the required parameter 'employee_id' when calling DefaultApi.employees_employee_id_put" if employee_id.nil?
      # resource path
      local_var_path = "/employees/{employee_id}".sub('{format}','json').sub('{' + 'employee_id' + '}', employee_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmployeeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#employees_employee_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @option opts [String] :full_address 
    # @option opts [String] :zip_code 
    # @return [nil]
    def employees_geo_qualify_get(opts = {})
      employees_geo_qualify_get_with_http_info(opts)
      return nil
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @option opts [String] :full_address 
    # @option opts [String] :zip_code 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def employees_geo_qualify_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.employees_geo_qualify_get ..."
      end
      # resource path
      local_var_path = "/employees/geo_qualify".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'full_address'] = opts[:'full_address'] if !opts[:'full_address'].nil?
      query_params[:'zip_code'] = opts[:'zip_code'] if !opts[:'zip_code'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#employees_geo_qualify_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state 
    # @option opts [String] :missing_documents 
    # @option opts [String] :suppl_program_status 
    # @option opts [String] :address 
    # @option opts [String] :city 
    # @option opts [String] :location_id 
    # @option opts [String] :status 
    # @option opts [String] :search 
    # @option opts [String] :location 
    # @option opts [String] :per_page 
    # @option opts [String] :ssn 
    # @option opts [String] :missing_docs 
    # @option opts [String] :x_auth_iv 
    # @option opts [String] :from_date 
    # @option opts [String] :missing_hm_info 
    # @option opts [String] :user 
    # @option opts [String] :qualifications 
    # @option opts [String] :first_name 
    # @option opts [String] :last_name 
    # @option opts [String] :zone_status 
    # @option opts [String] :x_auth_token 
    # @option opts [String] :is_qualified 
    # @option opts [String] :application_status 
    # @option opts [String] :is_advanced_search 
    # @option opts [String] :include_nq 
    # @option opts [String] :employee_id 
    # @option opts [String] :company 
    # @option opts [String] :to_date 
    # @option opts [String] :page 
    # @option opts [String] :zip 
    # @return [EmployeesResponse]
    def employees_get(opts = {})
      data, _status_code, _headers = employees_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state 
    # @option opts [String] :missing_documents 
    # @option opts [String] :suppl_program_status 
    # @option opts [String] :address 
    # @option opts [String] :city 
    # @option opts [String] :location_id 
    # @option opts [String] :status 
    # @option opts [String] :search 
    # @option opts [String] :location 
    # @option opts [String] :per_page 
    # @option opts [String] :ssn 
    # @option opts [String] :missing_docs 
    # @option opts [String] :x_auth_iv 
    # @option opts [String] :from_date 
    # @option opts [String] :missing_hm_info 
    # @option opts [String] :user 
    # @option opts [String] :qualifications 
    # @option opts [String] :first_name 
    # @option opts [String] :last_name 
    # @option opts [String] :zone_status 
    # @option opts [String] :x_auth_token 
    # @option opts [String] :is_qualified 
    # @option opts [String] :application_status 
    # @option opts [String] :is_advanced_search 
    # @option opts [String] :include_nq 
    # @option opts [String] :employee_id 
    # @option opts [String] :company 
    # @option opts [String] :to_date 
    # @option opts [String] :page 
    # @option opts [String] :zip 
    # @return [Array<(EmployeesResponse, Fixnum, Hash)>] EmployeesResponse data, response status code and response headers
    def employees_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.employees_get ..."
      end
      # resource path
      local_var_path = "/employees".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'missing_documents'] = opts[:'missing_documents'] if !opts[:'missing_documents'].nil?
      query_params[:'suppl_program_status'] = opts[:'suppl_program_status'] if !opts[:'suppl_program_status'].nil?
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'city'] = opts[:'city'] if !opts[:'city'].nil?
      query_params[:'location_id'] = opts[:'location_id'] if !opts[:'location_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'ssn'] = opts[:'ssn'] if !opts[:'ssn'].nil?
      query_params[:'missing_docs'] = opts[:'missing_docs'] if !opts[:'missing_docs'].nil?
      query_params[:'from_date'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'missing_hm_info'] = opts[:'missing_hm_info'] if !opts[:'missing_hm_info'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'qualifications'] = opts[:'qualifications'] if !opts[:'qualifications'].nil?
      query_params[:'first_name'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'last_name'] = opts[:'last_name'] if !opts[:'last_name'].nil?
      query_params[:'zone_status'] = opts[:'zone_status'] if !opts[:'zone_status'].nil?
      query_params[:'is_qualified'] = opts[:'is_qualified'] if !opts[:'is_qualified'].nil?
      query_params[:'application_status'] = opts[:'application_status'] if !opts[:'application_status'].nil?
      query_params[:'is_advanced_search'] = opts[:'is_advanced_search'] if !opts[:'is_advanced_search'].nil?
      query_params[:'include_nq'] = opts[:'include_nq'] if !opts[:'include_nq'].nil?
      query_params[:'employee_id'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'company'] = opts[:'company'] if !opts[:'company'].nil?
      query_params[:'to_date'] = opts[:'to_date'] if !opts[:'to_date'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'zip'] = opts[:'zip'] if !opts[:'zip'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmployeesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#employees_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param employee 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [EmployeeResponse]
    def employees_post(employee, opts = {})
      data, _status_code, _headers = employees_post_with_http_info(employee, opts)
      return data
    end

    # 
    # 
    # @param employee 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(EmployeeResponse, Fixnum, Hash)>] EmployeeResponse data, response status code and response headers
    def employees_post_with_http_info(employee, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.employees_post ..."
      end
      # verify the required parameter 'employee' is set
      fail ArgumentError, "Missing the required parameter 'employee' when calling DefaultApi.employees_post" if employee.nil?
      # resource path
      local_var_path = "/employees".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(employee)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmployeeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#employees_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [OccupationsResponse]
    def occupations_get(opts = {})
      data, _status_code, _headers = occupations_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(OccupationsResponse, Fixnum, Hash)>] OccupationsResponse data, response status code and response headers
    def occupations_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.occupations_get ..."
      end
      # resource path
      local_var_path = "/occupations".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OccupationsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#occupations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def processor_stats_get(opts = {})
      processor_stats_get_with_http_info(opts)
      return nil
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def processor_stats_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.processor_stats_get ..."
      end
      # resource path
      local_var_path = "/processor_stats".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#processor_stats_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :to_date 
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @option opts [String] :location_id 
    # @option opts [String] :from_date 
    # @return [nil]
    def reports_get(opts = {})
      reports_get_with_http_info(opts)
      return nil
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :to_date 
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @option opts [String] :location_id 
    # @option opts [String] :from_date 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reports_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.reports_get ..."
      end
      # resource path
      local_var_path = "/reports".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'to_date'] = opts[:'to_date'] if !opts[:'to_date'].nil?
      query_params[:'location_id'] = opts[:'location_id'] if !opts[:'location_id'].nil?
      query_params[:'from_date'] = opts[:'from_date'] if !opts[:'from_date'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reports_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [StatesResponse]
    def states_get(opts = {})
      data, _status_code, _headers = states_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(StatesResponse, Fixnum, Hash)>] StatesResponse data, response status code and response headers
    def states_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.states_get ..."
      end
      # resource path
      local_var_path = "/states".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StatesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#states_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param state_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [CountiesResponse]
    def states_state_code_counties_get(state_code, opts = {})
      data, _status_code, _headers = states_state_code_counties_get_with_http_info(state_code, opts)
      return data
    end

    # 
    # 
    # @param state_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(CountiesResponse, Fixnum, Hash)>] CountiesResponse data, response status code and response headers
    def states_state_code_counties_get_with_http_info(state_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.states_state_code_counties_get ..."
      end
      # verify the required parameter 'state_code' is set
      fail ArgumentError, "Missing the required parameter 'state_code' when calling DefaultApi.states_state_code_counties_get" if state_code.nil?
      # resource path
      local_var_path = "/states/{state_code}/counties".sub('{format}','json').sub('{' + 'state_code' + '}', state_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CountiesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#states_state_code_counties_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Subscriptions]
    def subscriptions_get(opts = {})
      data, _status_code, _headers = subscriptions_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(Subscriptions, Fixnum, Hash)>] Subscriptions data, response status code and response headers
    def subscriptions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.subscriptions_get ..."
      end
      # resource path
      local_var_path = "/subscriptions".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscriptions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#subscriptions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param post_subscription 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Subscriptions]
    def subscriptions_post(post_subscription, opts = {})
      data, _status_code, _headers = subscriptions_post_with_http_info(post_subscription, opts)
      return data
    end

    # 
    # 
    # @param post_subscription 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(Subscriptions, Fixnum, Hash)>] Subscriptions data, response status code and response headers
    def subscriptions_post_with_http_info(post_subscription, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.subscriptions_post ..."
      end
      # verify the required parameter 'post_subscription' is set
      fail ArgumentError, "Missing the required parameter 'post_subscription' when calling DefaultApi.subscriptions_post" if post_subscription.nil?
      # resource path
      local_var_path = "/subscriptions".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(post_subscription)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscriptions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#subscriptions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Subscriptions]
    def subscriptions_subscription_id_delete(subscription_id, opts = {})
      data, _status_code, _headers = subscriptions_subscription_id_delete_with_http_info(subscription_id, opts)
      return data
    end

    # 
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(Subscriptions, Fixnum, Hash)>] Subscriptions data, response status code and response headers
    def subscriptions_subscription_id_delete_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.subscriptions_subscription_id_delete ..."
      end
      # verify the required parameter 'subscription_id' is set
      fail ArgumentError, "Missing the required parameter 'subscription_id' when calling DefaultApi.subscriptions_subscription_id_delete" if subscription_id.nil?
      # resource path
      local_var_path = "/subscriptions/{subscription_id}".sub('{format}','json').sub('{' + 'subscription_id' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscriptions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#subscriptions_subscription_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [GetSubscription]
    def subscriptions_subscription_id_get(subscription_id, opts = {})
      data, _status_code, _headers = subscriptions_subscription_id_get_with_http_info(subscription_id, opts)
      return data
    end

    # 
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(GetSubscription, Fixnum, Hash)>] GetSubscription data, response status code and response headers
    def subscriptions_subscription_id_get_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.subscriptions_subscription_id_get ..."
      end
      # verify the required parameter 'subscription_id' is set
      fail ArgumentError, "Missing the required parameter 'subscription_id' when calling DefaultApi.subscriptions_subscription_id_get" if subscription_id.nil?
      # resource path
      local_var_path = "/subscriptions/{subscription_id}".sub('{format}','json').sub('{' + 'subscription_id' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSubscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#subscriptions_subscription_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param subscription_id 
    # @param post_subscription 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Subscriptions]
    def subscriptions_subscription_id_put(subscription_id, post_subscription, opts = {})
      data, _status_code, _headers = subscriptions_subscription_id_put_with_http_info(subscription_id, post_subscription, opts)
      return data
    end

    # 
    # 
    # @param subscription_id 
    # @param post_subscription 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(Subscriptions, Fixnum, Hash)>] Subscriptions data, response status code and response headers
    def subscriptions_subscription_id_put_with_http_info(subscription_id, post_subscription, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.subscriptions_subscription_id_put ..."
      end
      # verify the required parameter 'subscription_id' is set
      fail ArgumentError, "Missing the required parameter 'subscription_id' when calling DefaultApi.subscriptions_subscription_id_put" if subscription_id.nil?
      # verify the required parameter 'post_subscription' is set
      fail ArgumentError, "Missing the required parameter 'post_subscription' when calling DefaultApi.subscriptions_subscription_id_put" if post_subscription.nil?
      # resource path
      local_var_path = "/subscriptions/{subscription_id}".sub('{format}','json').sub('{' + 'subscription_id' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(post_subscription)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscriptions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#subscriptions_subscription_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [SubscriptionTypes]
    def subscriptions_types_get(opts = {})
      data, _status_code, _headers = subscriptions_types_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(SubscriptionTypes, Fixnum, Hash)>] SubscriptionTypes data, response status code and response headers
    def subscriptions_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.subscriptions_types_get ..."
      end
      # resource path
      local_var_path = "/subscriptions/types".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionTypes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#subscriptions_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def supplementary_program_statuses_get(opts = {})
      data, status_code, headers = supplementary_program_statuses_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def supplementary_program_statuses_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.supplementary_program_statuses_get ..."
      end
      # resource path
      local_var_path = "/supplementary_program_statuses".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SupplementaryPrograms')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#supplementary_program_statuses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param status_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def supplementary_program_statuses_status_code_get(status_code, opts = {})
      data, status_code, headers = supplementary_program_statuses_status_code_get_with_http_info(status_code, opts)
      return data
    end

    # 
    # 
    # @param status_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def supplementary_program_statuses_status_code_get_with_http_info(status_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.supplementary_program_statuses_status_code_get ..."
      end
      # verify the required parameter 'status_code' is set
      fail ArgumentError, "Missing the required parameter 'status_code' when calling DefaultApi.supplementary_program_statuses_status_code_get" if status_code.nil?
      # resource path
      local_var_path = "/supplementary_program_statuses/{status_code}".sub('{format}','json').sub('{' + 'status_code' + '}', status_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SupplementaryProgram')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#supplementary_program_statuses_status_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [SupplementaryPrograms]
    def supplementary_programs_get(opts = {})
      data, _status_code, _headers = supplementary_programs_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(SupplementaryPrograms, Fixnum, Hash)>] SupplementaryPrograms data, response status code and response headers
    def supplementary_programs_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.supplementary_programs_get ..."
      end
      # resource path
      local_var_path = "/supplementary_programs".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SupplementaryPrograms')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#supplementary_programs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param supplementary_program_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [SupplementaryProgram]
    def supplementary_programs_supplementary_program_code_get(supplementary_program_code, opts = {})
      data, _status_code, _headers = supplementary_programs_supplementary_program_code_get_with_http_info(supplementary_program_code, opts)
      return data
    end

    # 
    # 
    # @param supplementary_program_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(SupplementaryProgram, Fixnum, Hash)>] SupplementaryProgram data, response status code and response headers
    def supplementary_programs_supplementary_program_code_get_with_http_info(supplementary_program_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.supplementary_programs_supplementary_program_code_get ..."
      end
      # verify the required parameter 'supplementary_program_code' is set
      fail ArgumentError, "Missing the required parameter 'supplementary_program_code' when calling DefaultApi.supplementary_programs_supplementary_program_code_get" if supplementary_program_code.nil?
      # resource path
      local_var_path = "/supplementary_programs/{supplementary_program_code}".sub('{format}','json').sub('{' + 'supplementary_program_code' + '}', supplementary_program_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SupplementaryProgram')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#supplementary_programs_supplementary_program_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [TargetGroups]
    def target_groups_get(opts = {})
      data, _status_code, _headers = target_groups_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(TargetGroups, Fixnum, Hash)>] TargetGroups data, response status code and response headers
    def target_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.target_groups_get ..."
      end
      # resource path
      local_var_path = "/target_groups".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TargetGroups')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#target_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param target_group_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [TargetGroup]
    def target_groups_target_group_code_get(target_group_code, opts = {})
      data, _status_code, _headers = target_groups_target_group_code_get_with_http_info(target_group_code, opts)
      return data
    end

    # 
    # 
    # @param target_group_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(TargetGroup, Fixnum, Hash)>] TargetGroup data, response status code and response headers
    def target_groups_target_group_code_get_with_http_info(target_group_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.target_groups_target_group_code_get ..."
      end
      # verify the required parameter 'target_group_code' is set
      fail ArgumentError, "Missing the required parameter 'target_group_code' when calling DefaultApi.target_groups_target_group_code_get" if target_group_code.nil?
      # resource path
      local_var_path = "/target_groups/{target_group_code}".sub('{format}','json').sub('{' + 'target_group_code' + '}', target_group_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TargetGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#target_groups_target_group_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def users_change_password_put(password, opts = {})
      users_change_password_put_with_http_info(password, opts)
      return nil
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_change_password_put_with_http_info(password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.users_change_password_put ..."
      end
      # resource path
      local_var_path = "/users/change_password".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body =  @api_client.object_to_http_body(password)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#users_change_password_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param forgot_password 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_forgot_password_post(forgot_password, opts = {})
      data, status_code, headers = users_forgot_password_post_with_http_info(forgot_password, opts)
      return data
    end

    # 
    # 
    # @param forgot_password 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_forgot_password_post_with_http_info(forgot_password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.users_forgot_password_post ..."
      end
      # verify the required parameter 'forgot_password' is set
      fail ArgumentError, "Missing the required parameter 'forgot_password' when calling DefaultApi.users_forgot_password_post" if forgot_password.nil?
      # resource path
      local_var_path = "/users/forgot_password".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(forgot_password)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ForgotPassword')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#users_forgot_password_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param forgot_username 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_forgot_username_post(forgot_username, opts = {})
      data, status_code, headers = users_forgot_username_post_with_http_info(forgot_username, opts)
      return data
    end

    # 
    # 
    # @param forgot_username 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_forgot_username_post_with_http_info(forgot_username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.users_forgot_username_post ..."
      end
      # verify the required parameter 'forgot_username' is set
      fail ArgumentError, "Missing the required parameter 'forgot_username' when calling DefaultApi.users_forgot_username_post" if forgot_username.nil?
      # resource path
      local_var_path = "/users/forgot_username".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(forgot_username)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ForgotUsername')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#users_forgot_username_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def users_get(opts = {})
      users_get_with_http_info(opts)
      return nil
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.users_get ..."
      end
      # resource path
      local_var_path = "/users".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_api_key 
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def users_post(opts = {})
      users_post_with_http_info(opts)
      return nil
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_api_key 
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.users_post ..."
      end
      # resource path
      local_var_path = "/users".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-API-KEY'] = opts[:'x_api_key'] if !opts[:'x_api_key'].nil?
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#users_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def users_put(user_update, opts = {})
      users_put_with_http_info(user_update, opts)
      return nil
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_put_with_http_info(user_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.users_put ..."
      end
      # resource path
      local_var_path = "/users".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_update)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#users_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def zone_statuses_get(opts = {})
      data, status_code, headers = zone_statuses_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def zone_statuses_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.zone_statuses_get ..."
      end
      # resource path
      local_var_path = "/zone_statuses".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Zones')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#zone_statuses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param status_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [nil]
    def zone_statuses_status_code_get(status_code, opts = {})
      data, status_code, headers = zone_statuses_status_code_get_with_http_info(status_code, opts)
      return data
    end

    # 
    # 
    # @param status_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def zone_statuses_status_code_get_with_http_info(status_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.zone_statuses_status_code_get ..."
      end
      # verify the required parameter 'status_code' is set
      fail ArgumentError, "Missing the required parameter 'status_code' when calling DefaultApi.zone_statuses_status_code_get" if status_code.nil?
      # resource path
      local_var_path = "/zone_statuses/{status_code}".sub('{format}','json').sub('{' + 'status_code' + '}', status_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Zone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#zone_statuses_status_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Zones]
    def zones_get(opts = {})
      data, _status_code, _headers = zones_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(Zones, Fixnum, Hash)>] Zones data, response status code and response headers
    def zones_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.zones_get ..."
      end
      # resource path
      local_var_path = "/zones".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Zones')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#zones_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param zone_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Zone]
    def zones_zone_code_get(zone_code, opts = {})
      data, _status_code, _headers = zones_zone_code_get_with_http_info(zone_code, opts)
      return data
    end

    # 
    # 
    # @param zone_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_auth_token 
    # @option opts [String] :x_auth_iv 
    # @return [Array<(Zone, Fixnum, Hash)>] Zone data, response status code and response headers
    def zones_zone_code_get_with_http_info(zone_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.zones_zone_code_get ..."
      end
      # verify the required parameter 'zone_code' is set
      fail ArgumentError, "Missing the required parameter 'zone_code' when calling DefaultApi.zones_zone_code_get" if zone_code.nil?
      # resource path
      local_var_path = "/zones/{zone_code}".sub('{format}','json').sub('{' + 'zone_code' + '}', zone_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'X-AUTH-TOKEN'] = opts[:'x_auth_token'] if !opts[:'x_auth_token'].nil?
      header_params[:'X-AUTH-IV'] = opts[:'x_auth_iv'] if !opts[:'x_auth_iv'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Zone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#zones_zone_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
